name: release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  GO_VERSION: "1.22.x"
  BINARY_NAME: "packprompt"

jobs:
  semantic_release:
    name: semantic-release (tag & changelog)
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.sr.outputs.new_release_published }}
      version:   ${{ steps.sr.outputs.new_release_version }}
      tag:       ${{ steps.sr.outputs.new_release_git_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: semantic-release
        id: sr
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: build artifacts
    needs: semantic_release
    if: needs.semantic_release.outputs.published == 'true'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            archive: tar.gz
            exe_suffix: ""
          - goos: linux
            goarch: arm64
            archive: tar.gz
            exe_suffix: ""
          - goos: darwin
            goarch: amd64
            archive: tar.gz
            exe_suffix: ""
          - goos: darwin
            goarch: arm64
            archive: tar.gz
            exe_suffix: ""
          - goos: windows
            goarch: amd64
            archive: zip
            exe_suffix: ".exe"
          - goos: windows
            goarch: arm64
            archive: zip
            exe_suffix: ".exe"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Go build + package
        env:
          GOOS:   ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.semantic_release.outputs.version }}
          EXE: ${{ env.BINARY_NAME }}${{ matrix.exe_suffix }}
        run: |
          set -euo pipefail
          mkdir -p build dist
          CGO_ENABLED=0 go build -trimpath \
            -ldflags "-s -w -X 'main.version=${VERSION}'" \
            -o "build/${EXE}" .

          ARCHIVE_NAME="${{ env.BINARY_NAME }}_v${VERSION}_${{ matrix.goos }}_${{ matrix.goarch }}.${{ matrix.archive }}"
          if [ "${{ matrix.archive }}" = "zip" ]; then
            (cd build && zip -q "../dist/${ARCHIVE_NAME}" "${EXE}")
          else
            (cd build && tar -czf "../dist/${ARCHIVE_NAME}" "${EXE}")
          fi

          (cd dist && sha256sum "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256")

      - name: Upload job artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          if-no-files-found: error
          retention-days: 7

  publish_assets:
    name: attach assets to GitHub Release
    needs: [semantic_release, build]
    if: needs.semantic_release.outputs.published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
          path: dist

      - name: Upload assets to the release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.semantic_release.outputs.tag }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
